function sample()
{
	Load arguments(args)
	Load file weight
    Create result directory
    Load images:
        - x_src: content image
        - x_ref: reference iamge 
        - y_ref: reference image domain
    style_transfer()
}

function style_transfer(x_src, x_ref, y_ref)
{
    s_ref = style_encoder(x_ref, y_ref) // calculate style encode by reference image and its domain
    generated_image = nets.generator(x_src, s_ref) // generated_image is generated by x_src go thorugh style encode of reference image (s_ref)
    return generated_image // result image
}

function style_encoder(x, y)// x: image; y: domain
{
    h = self.shared(x) // image go through shared part of network
    out = []
    for layer in self.unshared: // for each unshared part of each domain
        out += [layer(h)] // generate result
    s = out[y]  // get value at index of domain y
    return s
}

function generator(x, y)// x: image; s: style encode
{
    x = from_rgb(x)
    for block in encode: // image go through each block of encoded part
        x = block(x)
    for block in decode: // image go through each block of decoded part
        x = block(x, s)
    return self.to_rgb(x) // return generated image by image x and style encode y
}